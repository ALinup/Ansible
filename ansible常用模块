1、主机连通性测试：
ansible web -m ping

2、command 模块
这个模块可以直接在远程主机上执行命令，并将结果返回本主机。
例子：
ansible web -m command -a 'ss -ntl'
常用命令：
chdir　　　　　　 # 在执行命令之前，先切换到该目录
executable # 切换shell来执行命令，需要使用命令的绝对路径
free_form 　 # 要执行的Linux指令，一般使用Ansible的-a参数代替。
creates 　# 一个文件名，当这个文件存在，则该命令不执行,可以用来做判断
removes # 一个文件名，这个文件不存在，则该命令不执行
例子：
ansible web -m command -a 'chdir=/data/ ls'   #先切换到/data/ 目录，再执行“ls”命令
ansible web -m command -a 'creates=/data/aaa.jpg ls'   #如果/data/aaa.jpg存在，则不执行“ls”命令
ansible web -m command -a 'removes=/data/aaa.jpg cat /data/a'   #如果/data/aaa.jpg存在，则执行“cat /data/a”命令

3、shell模块
shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。
例子：
ansible web -m shell -a 'cat /etc/passwd |grep "keer"'

4、copy模块
这个模块用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等。
相关选项如下：
src　　　　#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于"rsync"
content　　　#用于替换"src"，可以直接指定文件的值
dest　　　　#必选项，将源文件复制到的远程主机的绝对路径
backup　　　#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息
directory_mode　　　　#递归设定目录的权限，默认为系统默认权限
force　　　　#当目标主机包含该文件，但内容不同时，设为"yes"，表示强制覆盖；设为"no"，表示目标主机的目标位置不存在该文件才复制。默认为"yes"
others　　　　#所有的 file 模块中的选项可以在这里使用
例子：
ansible web -m copy -a 'src=~/hello dest=/data/hello'   #复制文件
ansible web -m copy -a 'content="I am keer\n" dest=/data/name mode=666'   #给定内容生成文件，并制定权限
ansible web -m shell -a 'ls -l /data/'   #查看生成的文件及其权限
ansible web -m copy -a 'content="I am keerya\n" backup=yes dest=/data/name mode=666'   #修改文件内容，然后覆盖备份
ansible web -m shell -a 'cat /data/name'   #查看name文件内容

5、file模块
该模块主要用于设置文件的属性，比如创建文件、创建链接文件、删除文件等。
常用命令：
force　　#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no
group　　#定义文件/目录的属组。后面可以加上mode：定义文件/目录的权限
owner　　#定义文件/目录的属主。后面必须跟上path：定义文件/目录的路径
recurse　　#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况
dest　　#被链接到的路径，只应用于state=link的情况
state　　#状态，有以下选项：
directory：如果目录不存在，就创建目录
file：即使文件不存在，也不会被创建
link：创建软链接
hard：创建硬链接
touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间
absent：删除目录、文件或者取消链接文件
例子：
ansible web -m file -a 'path=/data/app state=directory'   #创建目录
ansible web -m shell -a 'ls -l /data'   #查看目录内容
ansible web -m file -a 'path=/data/bbb.jpg src=aaa.jpg state=link'   #创建链接文件
ansible web -m file -a 'path=/data/a state=absent'   #删除文件

6、fetch模块
该模块用于从远程某主机获取（复制）文件到本地。
选项：
dest：用来存放文件的目录
src：在远程拉取的文件，并且必须是一个file，不能是目录
例子：
ansible web -m fetch -a 'src=/data/hello dest=/data'

7、cron模块
该模块适用于管理cron计划任务的。
其使用的语法跟我们的crontab文件中的语法一致，同时，可以指定以下选项：
day= #日应该运行的工作( 1-31, *, */2, )
hour= # 小时 ( 0-23, *, */2, )
minute= #分钟( 0-59, *, */2, )
month= # 月( 1-12, *, /2, )
weekday= # 周 ( 0-6 for Sunday-Saturday,, )
job= #指明运行的命令是什么
name= #定时任务描述
reboot # 任务在重启时运行，不建议使用，建议使用special_time
special_time #特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）
state #指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务
user # 以哪个用户的身份执行
例子：
ansible web -m cron -a 'name="ntp update every 5 min" minute=*/5 job="/sbin/ntpdate 192.168.159.128 &> /dev/null"'   #添加计划任务
ansible web -m shell -a 'crontab -l'   #查看计划任务
ansible web -m cron -a 'name="ntp update every 5 min" minute=*/5 job="/sbin/ntpdate 192.168.159.128 &> /dev/null" state=absent'   #删除计划任务

8、yum模块
顾名思义，该模块主要用于软件的安装。
选项：
name=　　#所安装的包的名称
state=　　#present--->安装， latest--->安装最新的, absent---> 卸载软件。
update_cache　　#强制更新yum的缓存
conf_file　　#指定远程yum安装时所依赖的配置文件（安装本地已有的包）。
disable_pgp_check　　#是否禁止GPG checking，只用于presentor latest。
disablerepo　　#临时禁止使用yum库。 只用于安装或更新时。
enablerepo　　#临时使用的yum库。只用于安装或更新时。
例子：
ansible web -m yum -a 'name=vim state=present'
9、service模块
该模块用于服务程序的管理。
选项：
arguments #命令行提供额外的参数
enabled #设置开机启动。
name= #服务名称
runlevel #开机启动的级别，一般不用指定。
sleep #在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)
state #有四种状态，分别为：started--->启动服务， stopped--->停止服务， restarted--->重启服务， reloaded--->重载配置
例子：
ansible web -m service -a 'name=nginx state=started enabled=true'   #开启服务并设置自启动
ansible web -m shell -a 'ss -ntl'   #查看端口是否打开
ansible web -m service -a 'name=nginx state=stopped'   #关闭服务

10、user模块
该模块主要是用来管理用户账号。
选项：
comment　　# 用户的描述信息
createhome　　# 是否创建家目录
force　　# 在使用state=absent时, 行为与userdel –force一致.
group　　# 指定基本组
groups　　# 指定附加组，如果指定为(groups=)表示删除所有组
home　　# 指定用户家目录
move_home　　# 如果设置为home=时, 试图将用户主目录移动到指定的目录
name　　# 指定用户名
non_unique　　# 该选项允许改变非唯一的用户ID值
password　　# 指定用户密码
remove　　# 在使用state=absent时, 行为是与userdel –remove一致
shell　　# 指定默认shell
state　　# 设置帐号状态，不指定为创建，指定值为absent表示删除
system　　# 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户
uid　　# 指定用户的uid
例子：
ansible web -m user -a 'name=keer uid=11111'   #添加一个用户并指定其uid
ansible web -m shell -a 'cat /etc/passwd |grep keer'   #查看用户
ansible web -m user -a 'name=keer state=absent'   #删除用户

11、group模块
该模块主要用于添加或删除组。
选项：
gid=　　#设置组的GID号
name=　　#指定组的名称
state=　　#指定组的状态，默认为创建，设置值为absent为删除
system=　　#设置值为yes，表示创建为系统组
例子：
ansible web -m group -a 'name=sanguo gid=12222'   #创建组
ansible web -m shell -a 'cat /etc/group | grep 12222'   #查看组
ansible web -m group -a 'name=sanguo state=absent'   #删除组

12、script模块
该模块用于将本机的脚本在被管理端的机器上运行。
该模块直接指定脚本的路径即可，我们通过例子来看一看到底如何使用的：
首先，我们写一个脚本，并给其加上执行权限：
vim /tmp/df.sh
内容：
#!/bin/bash
date >> /tmp/disk_total.log
df -lh >> /tmp/disk_total.log
添加执行权限：
chmod +x /tmp/df.sh
在被管理端执行脚本：
ansible web -m script -a '/tmp/df.sh'
查看文件内容：
ansible web -m shell -a 'cat /tmp/disk_total.log'

13、setup模块：
该模块主要用于收集信息，是通过调用facts组件来实现的。
facts组件是Ansible用于采集被管机器设备信息的一个功能，我们可以使用setup模块查机器的所有facts信息，可以使用filter来查看指定信息。
整个facts信息被包装在一个JSON格式的数据结构中，ansible_facts是最上层的值。
facts就是变量，内建变量。
每个主机的各种信息，cpu颗数、内存大小等，会存在facts中的某个变量中。
调用后返回很多对应主机的信息，在后面的操作中可以根据不同的信息来做不同的操作。
如redhat系列用yum安装，而debian系列用apt来安装软件。
例子：
ansible web -m setup -a 'filter="*mem*"'   #查看内存
ansible web -m shell -a 'free -m'   #确认是否一致
ansible web -m setup -a 'filter="*mem*"' --tree /tmp/facts   #保存内存信息
